START(OK):       // START, MAIN
    a-z -> TOKEN
    A-Z -> TOKEN
    0  -> HEX
    1-9 -> NUMBER
    //,   -> 
    //.   -> 
    //#   -> 
    "     -> STR
    //'   -> 
    //:   -> 
    //;   -> 
    +   -> BAD
    //-   -> 
    //*   -> COMM2
    /     -> COMM
    //%   -> 
    <   -> BAD
    >   -> BAD
    =   -> BAD
    //[   -> 
    //]   ->
    //(   -> 
    //)   -> 
    //{   -> 
    //}   -> 
    //\\  -> 
    //\*  -> 
    \t  -> START
    //!   -> 
    //@   -> 
    $   -> BAD
    //^   -> 
    //&   -> 
    _   -> UNDERSCORE
    //`   -> 
    //~   -> 
    //|   -> 
    ?   -> BAD
    \n  -> START
    //\s  -> 
    EOF -> START
TOKEN:           // Variable names
    0-9 -> TOKEN
    a-z -> TOKEN
    A-Z -> TOKEN
    \n  -> START
    \s  -> START
    EOF -> TOKEN
    \t  -> TOKEN
    _   -> TOKEN
    <   -> COMP
    >   -> COMP
    =   -> EQUAL
NUMBER:
    \n  -> START
    0-9 -> NUMBER
    <   -> COMP
    >   -> COMP
    .   -> AKY
    ,   -> BAD
    A-D -> BAD
    a-d -> BAD
    F-Z -> BAD
    f-z -> BAD
    e   -> EXP
    E   -> EXP
AKY:
    0-9 -> AKY
    \n  -> START
    e   -> EXP
    E   -> EXP
EXP:
    0-9 -> EXP
    A-Z -> BAD
    a-z -> BAD
    +   -> EXP
    -   -> EXP
    \n  -> START
HEX:
    0-9 -> OCT
    X -> HEX1
    x -> HEX1
    \n -> START
    e   -> EXP
    E   -> EXP
    .   -> AKY
HEX1:
    A-F -> HEX1
    G-Z -> BAD
    a-z -> BAD
    0-9 -> HEX1
    \n -> START
OCT:
    0-7 -> OCT
    A-Z -> BAD
    a-z -> BAD
    \n  -> START
COMM:
    / -> COMM1
    * -> MULT_C
COMM1: 
    A-Z -> COMM1
    a-z -> COMM1
    0-9 -> COMM1
    #   -> COMM1
    "   -> COMM1
    '   -> COMM1
    :   -> COMM1
    ;   -> COMM1
    +   -> COMM1
    -   -> COMM1
    *   -> COMM1
    /   -> COMM1
    %   -> COMM1
    <   -> COMM1
    >   -> COMM1
    =   -> COMM1
    (   -> COMM1
    )   -> COMM1
    {   -> COMM1
    }   -> COMM1
    \\  -> COMM1
    \*  -> COMM1
    \t  -> COMM1
    !   -> COMM1 
    @   -> COMM1 
    $   -> COMM1
    ^   -> COMM1
    &   -> COMM1
    _   -> COMM1 
    `   -> COMM1 
    ~   -> COMM1 
    |   -> COMM1
    ?   -> COMM1
    \n  -> START 
    \s  -> COMM1 

MULT_C: 
    A-Z -> MULT_C
   \*   -> MULT_C1
    a-z -> MULT_C
    0-9 -> MULT_C
    #   -> MULT_C
    "   -> MULT_C
    '   -> MULT_C
    :   -> MULT_C
    ;   -> MULT_C
    +   -> MULT_C
    -   -> MULT_C
    *   -> MULT_C
    /   -> MULT_C
    %   -> MULT_C
    <   -> MULT_C
    >   -> MULT_C
    =   -> MULT_C
    (   -> MULT_C
    )   -> MULT_C
    {   -> MULT_C
    }   -> MULT_C
    \\  -> MULT_C
    \t  -> MULT_C
    !   -> MULT_C 
    @   -> MULT_C
    $   -> MULT_C
    ^   -> MULT_C
    &   -> MULT_C
    _   -> MULT_C
    `   -> MULT_C
    ~   -> MULT_C 
    |   -> MULT_C
    ?   -> MULT_C
    \n  -> BAD
    \s  -> MULT_C
MULT_C1:
    / -> START
UNDERSCORE:         // start with UNDERSCORE (DONE)
    _ -> UNDERSCORE
    \n -> BAD
    A-Z -> TOKEN
    a-z -> TOKEN
    0-9 -> START
    !  -> BAD
    .   -> BAD
    ,   -> BAD
    + -> BAD
    #  -> BAD
    "  -> BAD
    '  -> BAD
    :  -> BAD
    ?  -> BAD
    ;  -> BAD
    - -> BAD
    / -> BAD
    %  -> BAD
    <  -> BAD
    >  -> BAD
    =  -> BAD
    [   -> BAD
    ]   -> BAD
    (   -> BAD
    )   -> BAD
    {   -> BAD
    }   -> BAD
    \\  -> BAD
    \*  -> BAD
    \t  -> START
    \s  -> START
    @   -> BAD
    $   -> START
    ^   -> BAD
    &   -> BAD
    `   -> BAD
    ~   -> BAD
    |   -> BAD
    EOF -> START

COMP:           // character after <
    a-z -> TOKEN
    A-Z -> TOKEN
    0-9 -> NUMBER
    ,   -> BAD
    .   -> BAD
    #   -> BAD
    "   -> BAD
    '   -> BAD
    :   -> BAD
    ;   -> BAD
    +   -> BAD
    -   -> BAD
    *   -> BAD
    /   -> BAD
    %   -> BAD
    <   -> BAD
    >   -> BAD
    =   -> COMPE
    [   -> BAD
    ]   -> BAD
    (   -> BAD
    )   -> BAD
    {   -> BAD
    }   -> BAD
    \\  -> BAD
    \*  -> BAD
    \t   -> COMP1
    !   -> BAD
    @   -> BAD
    $   -> BAD
    ^   -> BAD
    &   -> BAD
    _   -> BAD
    `   -> BAD
    ~   -> BAD
    |   -> BAD
    ?   -> BAD
    \n  -> BAD
    \s  -> COMP1
    EOF -> START
COMP1:
    = -> BAD 
    A-Z -> TOKEN
    a-z -> TOKEN
    0-9 -> NUMBER
COMPE:
    A-Z -> TOKEN
    a-z -> TOKEN
    0-9 -> NUMBER
    \s  -> COMPE
    \t  -> COMPE
    \n  -> BAD
STR:
    a-z -> STR
    A-Z -> STR
    0-9 -> STR
    ,   -> STR
    .   -> STR
    #   -> STR
    "  ->  STR3
    '   -> STR
    :   -> STR
    ;   -> STR
    +   -> STR
    -   -> STR
    *   -> STR
    /   -> STR
    %   -> STR
    <   -> STR
    >   -> STR
    =   -> STR
    [   -> STR
    ]   -> STR
    (   -> STR
    )   -> STR
    {   -> STR
    }   -> STR
    \\  -> STR1
    \*  -> STR
    \t  -> STR
    !   -> STR
    @   -> STR
    $   -> STR
    ^   -> STR
    &   -> STR
    _   -> STR
    `   -> STR
    ~   -> STR
    |   -> STR
    ?   -> STR
    \n  -> BAD
    \s  -> STR
    EOF -> START
STR1:          // /" START CHECK (DONE)
    a-z -> BAD
    A-Z -> BAD
    0-9 -> BAD
    ,   -> BAD
    .   -> BAD
    #   -> BAD
    "   -> STR2
    '   -> BAD
    :   -> BAD
    ;   -> BAD
    +   -> BAD
    -   -> BAD
    *   -> BAD
    /   -> BAD
    %   -> BAD
    <   -> BAD
    >   -> BAD
    =   -> BAD
    [   -> BAD
    ]   -> BAD
    (   -> BAD
    )   -> BAD
    {   -> BAD
    }   -> BAD
    \\  -> BAD
    \*  -> BAD
    \t  -> BAD
    !   -> BAD
    @   -> BAD
    $   -> BAD
    ^   -> BAD
    &   -> BAD
    _   -> BAD
    `   -> BAD
    ~   -> BAD
    |   -> BAD
    ?   -> BAD
    \n  -> BAD
    \s  -> BAD
    EOF -> START
STR2:
    a-z -> STR
    A-Z -> STR
    0-9 -> STR
    ,   -> STR
    .   -> STR
    #   -> STR
    "   -> STR
    '   -> STR
    :   -> STR
    ;   -> STR
    +   -> STR
    -   -> STR
    *   -> STR
    /   -> STR
    %   -> STR
    <   -> STR
    >   -> STR
    =   -> STR
    [   -> STR
    ]   -> STR
    (   -> STR
    )   -> STR
    {   -> STR
    }   -> STR
    \\  -> STR
    \*  -> STR
    \t  -> STR
    !   -> STR
    @   -> STR
    $   -> STR
    ^   -> STR
    &   -> STR
    _   -> STR
    `   -> STR
    ~   -> STR
    |   -> STR
    ?   -> STR
    \n  -> STR
    \s  -> STR
    EOF -> START
STR3:
    " -> BAD
    \n -> START
EQUAL:         // = Operator and == 
    0-9 -> NUMBER
    -   -> NUMBER
    =   -> EQUAL
    A-Z -> TOKEN
    a-z -> TOKEN
    _   -> UNDERSCORE
    *   -> BAD
PLUS:          // + Operator
    *   -> BAD
BAD:           //  FAIL (DONE)
    * -> BAD
    
    
